#summary Calling Slimbox functions from Javascript

<wiki:toc />

=Launching Slimbox directly from Javascript code=

{{{
Slimbox.open()
}}}

You can launch Slimbox using Javascript to display a single image or a group of images.

==Single image==

Call the {{{Slimbox.open()}}} method with the following parameters:

{{{
Slimbox.open(url, description, options);
}}}

  * *url* is _mandatory_, it's the URL of the image to display.
  * *description* is _optional_, it's the image description text.
  * *options* is _optional_, it's a javascript object where the keys are option names and the values depend on the key. The options are described in detail in the Slimbox [Manual#Setup manual]. Example of options object: {{{{ animateCaption: false, loop: true, overlayOpacity: 0.5 }}}}

_Examples:_

{{{
Slimbox.open("tree.jpg");
}}}

{{{
Slimbox.open("http://externalwebsite.com/tree.jpg", "My beautiful tree");
}}}

{{{
Slimbox.open("tree.jpg", "", {overlayOpacity: 0.2});
}}}

==Multiple images==

Call the {{{Slimbox.open()}}} method with the following parameters:

{{{
Slimbox.open(images, startImage, options);
}}}

  * *images* is _mandatory_, it's an array of arrays. The main array contains one array for each image. The second-level arrays contain the image URL as a _mandatory_ first element, and the image description as an _optional_ second element. Example, for 2 images: {{{[["image1.jpg"], ["image2.jpg", "description2"]]}}}
  * *startImage* is _mandatory_, it's the zero-based index of the image that you want to show first when Slimbox opens. 0 is the first image of the array, 1 is the second, etc. Of course, this value must be smaller than the size of the main array. Most of the time, you will use *0*.
  * *options* is _optional_, it's the same parameter as the one described above for displaying a single image.

_Examples:_

{{{
Slimbox.open([["cat.jpg", "Nice cat"], ["dog.jpg"]], 0);
}}}

{{{
Slimbox.open([["left.jpg"], ["middle.jpg"], ["right.jpg"]], 1, {loop: true});
}}}

=Enabling HTML DOM elements (such as links) to launch Slimbox when clicking=

==The autoload code block==

The *autoload code block* is the readable code block located by default inside the _slimbox.js_ file of the official Slimbox distribution. This code is using the Slimbox API to register Slimbox for a specific kind of links, so that Slimbox will open when the user clicks on any of these links. The registration is performed as soon as the DOM is ready.

The default implementation mimics the original Lightbox behavior: it registers Slimbox for all links ({{{<a>}}} tags) having a {{{rel}}} attribute value starting with the word "lightbox". If the {{{rel}}} attribute contains only the word "lightbox", it opens Slimbox to display a single image. Otherwise, it displays an image gallery containing all the images having the same {{{rel}}} attribute value as the one that was clicked, like "lightbox-animal" for example. For each link, its target ({{{href}}} attribute) is used as the image URL and its {{{title}}} attribute is used as an optional description shown in a caption below the image.

All the aspects of this default implementation may be freely changed to fit your needs thanks to the powerful Slimbox API. The following section explains how to do it.

==The slimbox() function for HTML DOM elements==

Slimbox makes a new function available on DOM elements when they are extended by mootools. This function can be called on a single extended DOM element, or on a group of extended DOM elements. Those elements will usually be link elements ({{{<a>}}} tags) but it's not mandatory: for example you can also use image maps ({{{<area>}}} tags). For other kinds of DOM elements, you'll need to provide a linkMapper function (described further in this page).

When calling this function on DOM elements, Slimbox will register itself and will open as soon as one of these DOM elements is clicked. The syntax is as follows.

===Single element===

{{{
$(element).slimbox(options, linkMapper);
}}}

where *element* is either:

  * a DOM element.
  * a string containing the _id_ of a DOM element.

parameters are all _optional_:

  * *options* is a javascript object where the keys are option names and the values depend on the key. The options are described in detail in the Slimbox [Manual#Setup manual].
  * *linkMapper* is a function. It is described further in this page.

_Example:_

{{{
<a id="myLink" href="tree.jpg">Click Me</a>
}}}

{{{
$("myLink").slimbox();
}}}

===Multiple elements===

{{{
$$(elements).slimbox(options, linkMapper, linksFilter);
}}}

where *elements* is either:

  * a collection of DOM elements.
  * an array containing DOM elements.
  * a comma-separated list of DOM elements (multiple arguments).
  * a string, which may contain either:
    * A tag name. This will select all DOM elements with the specified tag name.
    * A [http://mootools.net/docs/Utilities/Selectors mootools selector] (See the warning below).

*Warning:* If you want to use mootools selectors, your mootools build must include selectors support. The minimal mootools build included in the Slimbox distribution does not provide selectors support. The standard [http://mootools.net/download Mootools Core] download provides selectors support.

parameters are all _optional_:

  * *options* is a javascript object where the keys are option names and the values depend on the key. The options are described in detail in the Slimbox [Manual#Setup manual].
  * *linkMapper* is a function. It is described further in this page. If you want to omit this parameter, you can set it to {{{null}}}.
  * *linksFilter* is a function. It is described further in this page.

This is the magic part: calling the {{{slimbox()}}} function on a group of elements which actually contains more than one element will cause the associated images to be shown together as a group in Slimbox, with one image for each DOM element. The order of the images in the Slimbox gallery will follow the order of the DOM elements in the group.

_Example (using a mootools selector):_

{{{
<div id="gallery">
   <a href="tree.jpg">A tree</a>
   <a href="cat.jpg" title="Nice cat">A cat</a>
   <a href="dog.jpg" title="Look at this dog">A dog</a>
</div>
}}}

{{{
$$("#gallery a").slimbox();
}}}

==The linkMapper function==

The linkMapper is an optional function that you can pass as argument to the {{{slimbox()}}} function. It is responsible for doing the mapping between a DOM element and the image URL and description that will be shown in Slimbox when clicking on that element.

You can change it in order to change the location where the URL and description will be retrieved, or even customize the URL or description itself.

It takes one parameter: *the DOM element*.

It returns an *array* containing 2 elements: 

  * The image URL.
  * The image description. This parameter may be {{{null}}} or an empty string because the description is optional.

When you don't provide a linkMapper function, a default one is used. Here is its definition:

{{{
function(el) {
   return [el.href, el.title];
}
}}}

As you can see, the default linkMapper uses the href attribute of the DOM element as image URL, and the title attribute of the DOM element (if present, otherwise it will return {{{null}}}) as the image description.

This default implementation will work well with {{{<a>}}} and {{{<anchor>}}} tags. If you call the {{{slimbox()}}} function on other kinds of DOM elements which do not have an {{{href}}} attribute, of course it will not work and you will need to override the default linkMapper function.

_Example 1:_

Let's say that you want to fetch the image description from the {{{alt}}} attribute located in a DOM image node which is a *direct child* of the link node, instead of the {{{title}}} attribute of the link node itself. The HTML code looks like this:

{{{
<a href="flower.jpg" id="mypicture"><img src="flower-thumbnail.jpg" alt="Beautiful flower" /></a>
}}}

Here's the linkMapper function that you will need to use:

{{{
function(el) {
   return [el.href, el.firstChild.alt];
}
}}}

Please note that this function will only work if the DOM element actually has a child node, otherwise an error will occur when trying to access the {{{title}}} attribute.

_Example 2:_

This time, let's say that you want to use the image URL itself as description, so no need to fetch it from the {{{title}}} attribute of the DOM element. But you only want to keep the main part of the image URL, without the path at the beginning and without the file extension (.jpg). You will use a regular expression to achieve this. Here's what your custom linkMapper function will look like:

{{{
function(el) {
   return [el.href, /[^\/]*(?=\.\w+$)/.exec(el.href)];
}
}}}

_Example 3 (Flickr integration):_

In this latest example, we'll accomplish a complete Flickr integration with very little code. Let's say that we have links pointing to pages dedicated to pictures on the Flickr website. Each one of these links is surrounding an {{{<img>}}} tag, which is actually a thumbnail of the picture hosted on the Flickr website. It looks like this:

{{{
<a href="http://www.flickr.com/photos/14516334@N00/345009210/" title="A bee"><img src="http://farm1.static.flickr.com/159/345009210_1f826cd5a1_t.jpg" alt=""></a>
}}}

By default, clicking on this link (and thus on the thumbnail) will just make the browser navigate to the Flickr page of the picture.

Now, *without changing anything to the HTML*, we want to register Slimbox on these links so that when the visitor clicks on them, Slimbox will open and display the *medium-sized* image, also hosted on the Flickr website.

How to achieve this using a linkMapper function? It's quite simple actually. URLs of images hosted on the Flickr website are always the same for the same picture, only the end of the URL changes depending on the image size. Square-sized images name ends with {{{_s.jpg}}}, thumbnails name ends with {{{_t.jpg}}}, small images name ends with {{{_m.jpg}}} and medium-sized images name just ends with {{{.jpg}}}. So, we need to retrieve the URL of the thumbnail image which is a direct child of the clicked link, and then using a regular expression, replace the end of this URL with ".jpg" to get the URL of the medium-sized image. Done!

But that's not all, we also want to automatically add a link to the Flickr page of the picture in its description inside Slimbox. This is easy to achieve: we just need to append some HTML at the end of the existing description.

Last but not least, we'll use mootools selectors in order to create a collection of DOM elements containing only the links pointing to the Flickr website, so we can call our {{{slimbox()}}} function on it, passing it our custom linkMapper function as a second parameter. _*Note:* You'll need to include selectors in your mootools build for this to work. Mootools core includes selectors, the custom mootools build included with Slimbox does not._

Here's the code:

{{{
$$("a[href^=http://www.flickr.com/photos/]").slimbox({}, function(el) {
	return [el.firstChild.src.replace(/_[mts]\.jpg$/, ".jpg"), el.title + '<br /><a href="' + el.href + '">Flickr page</a>'];
});
}}}

==Unregistering Slimbox from the DOM elements==

In order to reverse the process and unregister Slimbox once the {{{slimbox()}}} function has been called on a DOM element or a group of DOM elements, use the following code.

For a single element:

{{{
$(element).removeEvents("click");
}}}

or for a group:

{{{
$$(elements).removeEvents("click");
}}}

The normal behavior will then be restored for these DOM elements and clicking on them will not launch Slimbox anymore.